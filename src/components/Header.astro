---
import { Icon } from "astro-icon/components";
import Logo from "../components/Logo.astro";
import ToggleMenu from "../components/common/ToggleMenu.astro";

import { getHomePermalink } from "../utils/permalinks";
import { trimSlash, getAsset } from "../utils/permalinks";
import type { CallToAction } from "../types";

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends CallToAction {}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = "header",
  links = [],
  actions = [],
  isSticky = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = "center",
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname.split("/")[1])}`;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky },
    "top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out",
  ]}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      "relative py-6 px-6 md:px-6 mx-auto w-full md:flex",
      {
        "max-w-7xl": !isFullWidth,
      },
    ]}
  >
    <div
      class:list={[
        { "mr-auto rtl:mr-0 rtl:ml-auto": position === "right" },
        "flex justify-between",
      ]}
    >
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="items-center w-full md:w-auto hidden md:flex overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:mx-auto bg-white md:bg-black h-screen md:h-auto absolute left-0 right-0 md:relative"
      aria-label="Main navigation"
    >
      <ul class="flex flex-col md:flex-row md:self-end w-full md:w-auto">
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? "dropdown" : "mt-2 px-4"}>
              {links?.length ? (
                <></>
              ) : (
                <div>
                  <a
                    class:list={[
                      "text-black md:text-white px-4 py-3 flex items-centers md:hover:text-TED-yellow md:hover:underline md:decoration-TED-yellow md:underline-offset-4 md:decoration-2 md:border-0 border-b-2 font-display transition duration-250 ease-in-out md:bg-black bg-white",
                      { "md:text-TED-yellow": href === currentPath, 'md:underline': href === currentPath }
                    ]}
                    href={href}
                  >
                    {text}
                  </a>
                </div>
              )}
            </li>
          ))
        }
      </ul>
      <div class="flex flex-col gap-3 px-4 mt-6 md:hidden">
        <h4 class="text-TED-red text-2xl">Follow us</h4>
        <a href="#" class="flex flex-row gap-2"
          ><Icon name="bi:facebook" class="w-5 h-5" /><p class="text-base">
            TEDxChulalongkornU
          </p></a
        >
        <a href="#" class="flex flex-row gap-2"
          ><Icon name="bi:instagram" class="w-5 h-5" /><p class="text-base">
            tedxchulalongkornu
          </p></a
        >
      </div>
      <div
        class:list={[
          { "ml-auto rtl:ml-0 rtl:mr-auto": position === "left" },
          "hidden md:self-center flex md:flex items-end md:mb-0 fixed w-[234px]  md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0",
        ]}
      >
        <div class="items-center justify-end w-full text-white md:flex hidden">
          <span class="rounded-full h-8 w-8 bg-gray-400"></span>
        </div>
      </div>
    </nav>
  </div>
</header>
